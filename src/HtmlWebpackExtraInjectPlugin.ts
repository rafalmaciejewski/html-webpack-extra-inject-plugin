/* eslint-disable @typescript-eslint/no-explicit-any */
import webpack from 'webpack';
import validateOptions from 'schema-utils';
import { JSONSchema4 } from 'schema-utils/declarations/validate';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import { HTML_TOKEN, PLUGIN_NAME } from './constants';

const schema: JSONSchema4 = {
  type: 'object',
  properties: {
    inject: {
      description: 'Content to be injected into html file generated by html-webpack-plugin',
      type: 'string',
    },
  },
  additionalProperties: false,
};

export class HtmlWebpackExtraInjectPlugin {
  constructor(private readonly opts: HtmlWebpackExtraInjectPluginOptions) {
    validateOptions(schema, opts);
  }

  apply(compiler: webpack.Compiler): void {
    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {
      // html-webpack-plugin v4
      if ((HtmlWebpackPlugin as any).getHooks) {
        HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tap(PLUGIN_NAME, (data) => {
          data.assetTags.scripts.unshift({
            tagName: 'script',
            attributes: {},
            innerHTML: HTML_TOKEN,
            voidTag: false,
          });
          return data;
        });
        HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tap(PLUGIN_NAME, (data) => {
          data.html = data.html.replace(`<script>${HTML_TOKEN}</script>`, this.opts.inject);
          return data;
        });
      } else {
        // html-webpack-plugin v3
        (compilation.hooks as any).htmlWebpackPluginBeforeHtmlProcessing.tap(PLUGIN_NAME, (data) => {
          data.html += this.opts.inject;
          return data;
        });
      }
    });
  }
}
