/* eslint-disable @typescript-eslint/no-explicit-any */
import webpack from 'webpack';
import validateOptions from 'schema-utils';
import { JSONSchema4 } from 'schema-utils/declarations/validate';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import { HTML_TOKEN, PLUGIN_NAME } from './constants';

const schema: JSONSchema4 = {
  type: 'object',
  properties: {
    inject: {
      description: 'Content to be injected into html file generated by html-webpack-plugin',
      type: 'string',
    },
  },
  additionalProperties: false,
};

export class HtmlWebpackExtraInjectPlugin {
  constructor(private readonly opts: HtmlWebpackExtraInjectPluginOptions) {
    validateOptions(schema, opts);
  }

  // eslint-disable-next-line @typescript-eslint/typedef,@typescript-eslint/no-untyped-public-signature,@typescript-eslint/explicit-function-return-type
  alterAssetTags(data) {
    const tag = {
      tagName: 'script',
      attributes: {},
      innerHTML: HTML_TOKEN,
      voidTag: false,
    };
    if (data.assetTags) {
      data.assetTags.scripts.unshift(tag);
    } else {
      data.body.unshift(tag);
    }
    return data;
  }

  // eslint-disable-next-line @typescript-eslint/typedef,@typescript-eslint/no-untyped-public-signature,@typescript-eslint/explicit-function-return-type
  inject(data) {
    data.html = data.html.replace(`<script>${HTML_TOKEN}</script>`, this.opts.inject);
    return data;
  }

  apply(compiler: webpack.Compiler): void {
    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {
      // html-webpack-plugin v4
      if ((HtmlWebpackPlugin as any).getHooks) {
        const hooks = HtmlWebpackPlugin.getHooks(compilation);
        hooks.alterAssetTags.tap(PLUGIN_NAME, this.alterAssetTags);
        hooks.beforeEmit.tap(PLUGIN_NAME, this.inject.bind(this));
      } else {
        // html-webpack-plugin v3
        const hooks = compilation.hooks as any;
        hooks.htmlWebpackPluginAlterAssetTags.tap(PLUGIN_NAME, this.alterAssetTags);
        hooks.htmlWebpackPluginAfterHtmlProcessing.tap(PLUGIN_NAME, this.inject.bind(this));
      }
    });
  }
}
